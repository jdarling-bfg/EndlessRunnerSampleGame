@Library('shared') _

pipeline {
    agent { label 'Mac' }
    options {
        timestamps()
    }
    stages {
        stage ('Clean workspace') {
          steps {
            cleanWs()
          }
        }
        stage ('Checkout project') {
          steps {
              script {
                  gitLFS('bfg-git-pat', 'https://github.com/jdarling-bfg/EndlessRunnerSampleGame.git', '*/unity_build')
              }
          }
        }
        stage ('Sonar (Disabled)') {
            steps {
                script {
//                     common.runSonarQube('.', 'sonar-project-key', 'AIM')
                }
            }
        }
        stage ('Build Unity application') {
            steps {
                withCredentials([string(credentialsId: 'unity-token', variable: 'UNITY_SERIAL')]) {
                    script {
                        try {
//                             sh "/Applications/Unity\\ Hub.app/Contents/MacOS/Unity\\ Hub -quit -batchmode -serial $UNITY_SERIAL -username 'TImothy.Cope@bigfishgames.com' -nographics"
//                             sh "/Applications/Unity\\ Hub.app/Contents/MacOS/Unity\\ Hub -projectPath ${WORKSPACE}/ -buildTarget iOS -batchmode -executeMethod CLBuilder.ReceiveBuildCommand --bundleVersion=${FULL_VERSION_NUMBER} --logFile ${WORKSPACE}/unity3d_editor.log -quit ${BUILD_CONFIG} -nographics"
                            sh "/Applications/Unity/Unity.app/Contents/MacOS/Unity -projectPath . -buildTarget iOS -batchmode -executeMethod CLBuilder.ReceiveBuildCommand --bundleVersion=${FULL_VERSION_NUMBER} --logFile ${WORKSPACE}/unity3d_editor.log -quit ${BUILD_CONFIG} -nographics"
                        } catch (err) {
                            echo "Caught: ${err}"
                            sh '''
                                guidConflicts=$(grep -A 1 "cs' conflicts with" ${WORKSPACE}/unity3d_editor.log)
                                if [ -z "$guidConflicts" ]; then
                                    echo "No GUID conflicts found"
                                else
                                    echo "Found GUID conflicts\n$guidConflicts" 1>&2
                                fi
                            '''
                            currentBuild.result = 'FAILURE'
                            stageResult."${STAGE_NAME}" = 'FAILURE'
                        }
                    }
                }
            }
        }
    }
}

def locateUnity() {
    sh '''
        if [[ "$OSTYPE" == "darwin"* ]] && [ -z "$UNITY_EXECUTABLE" ]; then
            unity_default_path="/Applications/Unity/Hub/Editor/${unity_version}/Unity.app/Contents/MacOS/Unity"
            if [ -f "${unity_default_path}" ]; then
                export UNITY_EXECUTABLE="${unity_default_path}"
                echo "Found 'UNITY_EXECUTABLE': '${UNITY_EXECUTABLE}'"
            else
                echo "Expected to find unity at '${unity_default_path}'. Please ensure Unity is installed and set 'UNITY_EXECUTABLE' env var to its location."
            fi
    '''
}

def gitLFS(credentials, url, branch) {
    checkout([
      $class: 'GitSCM',
      branches: [[name: "${branch}"]],
      doGenerateSubmoduleConfigurations: false,
      extensions: [
        [ $class: 'GitLFSPull' ],
        [
          $class: 'CleanBeforeCheckout',
          deleteUntrackedNestedRepositories: true
        ],
        [
          $class: "CloneOption",
          shallow: false,
          timeout: 40
        ],
        [
          $class: 'PruneStaleBranch'
        ],
      ],
      submoduleCfg: [],
      userRemoteConfigs: [[
        credentialsId: credentials,
        url: url
      ]]
    ])
}