@Library('shared') _

pipeline {
    agent { label 'Mac' }
    options {
        timestamps()
    }
    environment {
//         ASC_KEY = credentials('PM_ASC_KEY')
//         ASC_KEY_ID = credentials('PM_ASC_KEY_ID')
//         ASC_ISSUER = credentials('PM_ASC_ISSUER')
//         UPM_CONFIG = credentials('Slotsburg_Client_UPM_Config')
//         MATCH_KEY = credentials('match_certs_deploy_key')
//         MATCH_PASSWORD = credentials('TEMP_MATCH_PW')
//         APPLE_API_KEY = credentials('APPLE_API_KEY')
//         NEXUS_REPOSITORY = 'slotsburg-client-artifacts'
//         NEXUS_USER = credentials('NEXUS_USER_TOKEN')
//         NEXUS_PASS = credentials('NEXUS_PASS_TOKEN')
//         NPMRC = credentials('NEXUS_NPMRC')
        UNITY_CONFIG_TYPE = 'Development'
        BUILD_CONFIG = "IOS_${UNITY_CONFIG_TYPE}"
//         ORIG_IPA_NAME = 'jackpotcoveios.ipa'
      }
    stages {
        stage ('Clean workspace') {
          steps {
            cleanWs()
          }
        }
        stage ('Checkout project') {
            steps {
                script {
                    gitLFS('bfg-git-pat', 'https://github.com/jdarling-bfg/EndlessRunnerSampleGame.git', '*/unity_build')
                }
            }
        }
//         stage ('Sonar (Disabled)') {
//             steps {
//                 script {
//                     common.runSonarQube('.', 'sonar-project-key', 'AIM')
//                 }
//             }
//         }
    stage('Set Version Number')
    {
        steps {
            script {
                def ver = sh returnStdout:true, script: '''
                    #!/bin/bash
                    . "${WORKSPACE}"/version.profile
                    PATCH_VERSION=$(git rev-list --count HEAD)
                    VERSION_NUMBER=$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION
                    /bin/echo -n ${VERSION_NUMBER};
                '''
                env.VERSION_NUMBER = ver
                env.FULL_VERSION_NUMBER = ver
                env.FINAL_IPA = "PFC_${params.ENVIRONMENT_NAME}_${env.FULL_VERSION_NUMBER}_${params.SIGNING_TYPE}.ipa"

                currentBuild.displayName = "#${env.FULL_VERSION_NUMBER}"

                echo "VERSION_NUMBER: ${env.VERSION_NUMBER}"
                echo "FULL_VERSION_NUMBER: ${env.FULL_VERSION_NUMBER}"
            }
        }
    }
        stage ('Build Unity application') {
            steps {
                withCredentials([
                    string(credentialsId: 'unity-token', variable: 'UNITY_SERIAL'),
                    string(credentialsId: 'unity-password', variable: 'UNITY_PASSWORD')
                ]) {
                    script {
                        try {
//                             sh "/Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -serial $UNITY_SERIAL -username 'TImothy.Cope@bigfishgames.com' -password $UNITY_PASSWORD"
                            sh "/Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -serial $UNITY_SERIAL -username 'TImothy.Cope@bigfishgames.com'"
                            sh "/Applications/Unity/Unity.app/Contents/MacOS/Unity -projectPath . -buildTarget iOS -batchmode -executeMethod CLBuilder.ReceiveBuildCommand --bundleVersion=${FULL_VERSION_NUMBER} --logFile ${WORKSPACE}/unity3d_editor.log -quit ${BUILD_CONFIG} -nographics"
                        } catch (err) {
                            echo "Caught: ${err}"
                            sh '''
                                guidConflicts=$(grep -A 1 "cs' conflicts with" ${WORKSPACE}/unity3d_editor.log)
                                if [ -z "$guidConflicts" ]; then
                                    echo "No GUID conflicts found"
                                else
                                    echo "Found GUID conflicts\n$guidConflicts" 1>&2
                                fi
                            '''
                            currentBuild.result = 'FAILURE'
                            stageResult."${STAGE_NAME}" = 'FAILURE'
                        }
                    }
                }
            }
        }
    }
}

def locateUnity() {
    sh '''
        if [[ "$OSTYPE" == "darwin"* ]] && [ -z "$UNITY_EXECUTABLE" ]; then
            unity_default_path="/Applications/Unity/Hub/Editor/${unity_version}/Unity.app/Contents/MacOS/Unity"
            if [ -f "${unity_default_path}" ]; then
                export UNITY_EXECUTABLE="${unity_default_path}"
                echo "Found 'UNITY_EXECUTABLE': '${UNITY_EXECUTABLE}'"
            else
                echo "Expected to find unity at '${unity_default_path}'. Please ensure Unity is installed and set 'UNITY_EXECUTABLE' env var to its location."
            fi
    '''
}

def gitLFS(credentials, url, branch) {
    checkout([
      $class: 'GitSCM',
      branches: [[name: "${branch}"]],
      doGenerateSubmoduleConfigurations: false,
      extensions: [
        [ $class: 'GitLFSPull' ],
        [
          $class: 'CleanBeforeCheckout',
          deleteUntrackedNestedRepositories: true
        ],
        [
          $class: "CloneOption",
          shallow: false,
          timeout: 40
        ],
        [
          $class: 'PruneStaleBranch'
        ],
      ],
      submoduleCfg: [],
      userRemoteConfigs: [[
        credentialsId: credentials,
        url: url
      ]]
    ])
}