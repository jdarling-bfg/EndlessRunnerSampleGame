node('Mac') {
    stage('build') {
        step {
            sh 'xcodebuild -version'
        }
    }
    stage ('Build Unity application') {
        step {
            script {
                try {
                    sh '/Applications/Unity\\ Hub.app/Contents/MacOS/Unity\\ Hub -projectPath ${WORKSPACE}/ -buildTarget iOS -batchmode -executeMethod CLBuilder.ReceiveBuildCommand --bundleVersion=${FULL_VERSION_NUMBER} --logFile ${WORKSPACE}/unity3d_editor.log -quit ${BUILD_CONFIG}'
                } catch (err) {
                    echo "Caught: ${err}"
                    sh '''
                        guidConflicts=$(grep -A 1 "cs' conflicts with" ${WORKSPACE}/unity3d_editor.log)
                        if [ -z "$guidConflicts" ]; then
                            echo "No GUID conflicts found"
                        else
                            echo "Found GUID conflicts\n$guidConflicts" 1>&2
                        fi
                    '''
                    currentBuild.result = 'FAILURE'
                    stageResult."${STAGE_NAME}" = 'FAILURE'
                }
            }
       }
    }
}

def locateUnity()
{
    sh '''
        if [[ "$OSTYPE" == "darwin"* ]] && [ -z "$UNITY_EXECUTABLE" ]; then
            unity_default_path="/Applications/Unity/Hub/Editor/${unity_version}/Unity.app/Contents/MacOS/Unity"
            if [ -f "${unity_default_path}" ]; then
                export UNITY_EXECUTABLE="${unity_default_path}"
                echo "Found 'UNITY_EXECUTABLE': '${UNITY_EXECUTABLE}'"
            else
                echo "Expected to find unity at '${unity_default_path}'. Please ensure Unity is installed and set 'UNITY_EXECUTABLE' env var to its location."
            fi
    '''
}
